import java.awt.*;
import java.awt.event.*;

public class MenuShortcutDemo extends java.awt.Frame implements ActionListener, ItemListener {

  String menulabel[]={"File", "Edit","Draw","Help"};

  String menuitemlabel[][]={
    {"New", "-","Open",  "Save", "Save As...", "-", "Exit"},
    {"Copy", "Cut", "Paste"},
	{"Shap","Line","Pot"},
	{"Help"}
  };
  
  String cbmenuitemlabel[]={"Circle", "Rectangle"};
  
  int menuShortCut[][]={
    {KeyEvent.VK_N,0, KeyEvent.VK_O,  KeyEvent.VK_S, KeyEvent.VK_A, 0, KeyEvent.VK_E},
    {KeyEvent.VK_C, KeyEvent.VK_X, KeyEvent.VK_V},
	{0,KeyEvent.VK_L,KeyEvent.VK_P},
	{KeyEvent.VK_H}
  };

  int cbmenuShortCut[]={KeyEvent.VK_R, KeyEvent.VK_T};

  Menu menu[] = new Menu[4];
  MenuItem menuitem[][] = new MenuItem[4][12];
  CheckboxMenuItem checkboxmenuitem[] = new CheckboxMenuItem[2];

  Label label;

  public static void main(String args[]){
    new MenuShortcutDemo();
  }
  
  public MenuShortcutDemo() {
    super("Menu Shortcut Demo");

    setLayout(new BorderLayout());
    
    label = new Label();
    add(label, BorderLayout.SOUTH);

    MenuBar menuBar = createMenuBar();

    setMenuBar(menuBar);

    this.setSize(250, 250);

    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    Dimension frameSize = this.getSize();

    if (frameSize.height > screenSize.height)
      frameSize.height = screenSize.height;

    if (frameSize.width > screenSize.width)
      frameSize.width = screenSize.width;

    this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);

    this.setVisible(true);

    this.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        System.exit(0);
      }
    });
  }

  private MenuBar createMenuBar() {
    MenuBar menuBar = new MenuBar();

    for (int i=0; i<menulabel.length; i++){
      menu[i] = new Menu(menulabel[i]);
      menu[i].setFont(new Font("dialog", Font.PLAIN, 11));

      menuBar.add(menu[i]);
    }

    for(int i=0; i<menulabel.length; i++){
      for(int j=0; j<menuitemlabel[i].length; j++){
        if (i==2 && j==0) { 
          Menu submenu = new Menu(menuitemlabel[i][j]);
          submenu.setFont(new Font("dialog", Font.PLAIN, 11));
          
          for (int k=0; k<cbmenuitemlabel.length; k++){
            checkboxmenuitem[k] = new CheckboxMenuItem(cbmenuitemlabel[k]);
            
            if (k==0) 
              checkboxmenuitem[k].setState(true);
            
            checkboxmenuitem[k].setShortcut(new MenuShortcut(cbmenuShortCut[k], false));
            checkboxmenuitem[k].setFont(new Font("dialog", Font.PLAIN, 11));

            checkboxmenuitem[k].addItemListener(this);
      
            submenu.add(checkboxmenuitem[k]);
          }
      
          menu[i].add(submenu);
        }
        else if (menuitemlabel[i][j].equals("-")) {
          menu[i].addSeparator();
        }
        else {
          if (menuShortCut[i][j] != 0) 
            menuitem[i][j] = new MenuItem(menuitemlabel[i][j], new MenuShortcut(menuShortCut[i][j], false));
          else
            menuitem[i][j] = new MenuItem(menuitemlabel[i][j]);

          menuitem[i][j].setFont(new Font("dialog", Font.PLAIN, 11));

          menuitem[i][j].addActionListener(this);

          menu[i].add(menuitem[i][j]);
        }          
      }
    }

    return menuBar;
  }

  public void actionPerformed(ActionEvent e) {
    MenuItem menuitem = (MenuItem)e.getSource();

    if (menuitem.getLabel().equals("Exit")) { 
      System.exit(0);
    }
    else {
      label.setText("Select "  + menuitem.getLabel() + " Menu Item.");
    }
  }

  public void itemStateChanged(ItemEvent e) {
    CheckboxMenuItem cbmi = (CheckboxMenuItem)(e.getItemSelectable());
    
    for (int i=0; i < checkboxmenuitem.length; i++) {
      if(cbmi == checkboxmenuitem[i]) {
        checkboxmenuitem[i].setState(true);

        label.setText("Select " + checkboxmenuitem[i].getLabel() + " Checkbox Menu Item.");
      }
      else
        checkboxmenuitem[i].setState(false);
    }
  }
}
